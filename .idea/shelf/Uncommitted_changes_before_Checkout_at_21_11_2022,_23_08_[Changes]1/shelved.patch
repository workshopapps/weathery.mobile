Index: app/src/main/java/com/gear/weathery/SplashActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.gear.weathery\n\nimport android.content.Intent\nimport androidx.appcompat.app.AppCompatActivity\nimport android.os.Bundle\nimport android.view.WindowManager\nimport com.gear.weathery.common.navigation.BoardingNavigation\nimport com.gear.weathery.onboarding.SharedPreference\nimport kotlinx.coroutines.*\nimport javax.inject.Inject\n\n@Suppress(\"DEPRECATION\")\nclass SplashActivity : AppCompatActivity() {\n\n    @Inject\n    lateinit var boardingNavigation: BoardingNavigation\n    val activityScope = CoroutineScope(Dispatchers.Main)\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_splash)\n\n        window.setFlags(\n            WindowManager.LayoutParams.FLAG_FULLSCREEN,\n            WindowManager.LayoutParams.FLAG_FULLSCREEN\n        )\n\n        SharedPreference.init(applicationContext)\n        val first : Boolean = SharedPreference.getBoolean(\"ALLOW\", true)\n        activityScope.launch {\n            delay(3000)\n            if(first){\n                val intent:Intent = Intent(this@SplashActivity,MainActivity::class.java)\n                intent.putExtra(\"FIRST\",first)\n                startActivity(intent)\n            }else{\n               val intent:Intent = Intent(this@SplashActivity,MainActivity::class.java)\n                intent.putExtra(\"FIRST\",first)\n                startActivity(intent)\n            }\n\n            finish()\n        }\n\n    }\n\n    override fun onPause() {\n        activityScope.cancel()\n        super.onPause()\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/gear/weathery/SplashActivity.kt b/app/src/main/java/com/gear/weathery/SplashActivity.kt
--- a/app/src/main/java/com/gear/weathery/SplashActivity.kt	
+++ b/app/src/main/java/com/gear/weathery/SplashActivity.kt	
@@ -25,16 +25,18 @@
         )
 
         SharedPreference.init(applicationContext)
-        val first : Boolean = SharedPreference.getBoolean("ALLOW", true)
+        val firstLaunch : Boolean = SharedPreference.getBoolean("PERMISSION", false)
         activityScope.launch {
             delay(3000)
-            if(first){
+            if(firstLaunch){
+                //go to dashboard
                 val intent:Intent = Intent(this@SplashActivity,MainActivity::class.java)
-                intent.putExtra("FIRST",first)
+                intent.putExtra("FIRST",firstLaunch)
                 startActivity(intent)
             }else{
-               val intent:Intent = Intent(this@SplashActivity,MainActivity::class.java)
-                intent.putExtra("FIRST",first)
+                //go to on-boarding fragment
+                val intent:Intent = Intent(this@SplashActivity,MainActivity::class.java)
+                intent.putExtra("FIRST",firstLaunch)
                 startActivity(intent)
             }
 
Index: .idea/deploymentTargetDropDown.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"deploymentTargetDropDown\">\n    <targetSelectedWithDropDown>\n      <Target>\n        <type value=\"QUICK_BOOT_TARGET\" />\n        <deviceKey>\n          <Key>\n            <type value=\"VIRTUAL_DEVICE_PATH\" />\n            <value value=\"$PROJECT_DIR$/../.android/avd/Nexus_6P_API_31.avd\" />\n          </Key>\n        </deviceKey>\n      </Target>\n    </targetSelectedWithDropDown>\n    <timeTargetWasSelectedWithDropDown value=\"2022-11-16T15:27:25.260218Z\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/deploymentTargetDropDown.xml b/.idea/deploymentTargetDropDown.xml
--- a/.idea/deploymentTargetDropDown.xml	
+++ b/.idea/deploymentTargetDropDown.xml	
@@ -7,11 +7,11 @@
         <deviceKey>
           <Key>
             <type value="VIRTUAL_DEVICE_PATH" />
-            <value value="$PROJECT_DIR$/../.android/avd/Nexus_6P_API_31.avd" />
+            <value value="$PROJECT_DIR$/../.android/avd/Pixel_3a_API_31_arm64-v8a.avd" />
           </Key>
         </deviceKey>
       </Target>
     </targetSelectedWithDropDown>
-    <timeTargetWasSelectedWithDropDown value="2022-11-16T15:27:25.260218Z" />
+    <timeTargetWasSelectedWithDropDown value="2022-11-21T21:45:09.592201Z" />
   </component>
 </project>
\ No newline at end of file
Index: features/onboarding/src/main/java/com/gear/weathery/onboarding/BoardingFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.gear.weathery.onboarding\n\nimport android.Manifest\nimport android.graphics.Color\nimport android.os.Bundle\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport androidx.fragment.app.Fragment\nimport androidx.navigation.fragment.findNavController\nimport androidx.viewpager.widget.ViewPager\nimport com.gear.weathery.common.navigation.DashBoardNavigation\nimport com.gear.weathery.onboarding.databinding.FragmentBoardingBinding\nimport com.karumi.dexter.Dexter\nimport com.karumi.dexter.PermissionToken\nimport com.karumi.dexter.listener.PermissionDeniedResponse\nimport com.karumi.dexter.listener.PermissionGrantedResponse\nimport com.karumi.dexter.listener.PermissionRequest\nimport com.karumi.dexter.listener.single.PermissionListener\nimport dagger.hilt.android.AndroidEntryPoint\nimport javax.inject.Inject\n\n@AndroidEntryPoint\nclass BoardingFragment : Fragment(), PermissionListener {\n    private var _binding:FragmentBoardingBinding? =  null\n    private val binding get() = _binding!!\n    lateinit var pagerAdapter: ViewPagerAdapter\n\n\n    var permissionALlowed: Boolean = false\n\n\n\n    @Inject\n    lateinit var dashBoardNavigation: DashBoardNavigation\n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View? {\n        // Inflate the layout for this fragment\n        _binding = FragmentBoardingBinding.inflate(inflater, container, false)\n        return binding.root\n    }\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n\n        pagerAdapter = ViewPagerAdapter(requireContext())\n        binding.viewpager.adapter = pagerAdapter\n        binding.dotsIndicator.attachTo(binding.viewpager)\n        binding.viewpager.addOnPageChangeListener(object : ViewPager.OnPageChangeListener{\n            override fun onPageScrolled(\n                position: Int,\n                positionOffset: Float,\n                positionOffsetPixels: Int\n            ) {\n\n\n                if(position == 0){\n                    onboardFirstPageBtnDesign()\n                    binding.contBtn.setOnClickListener {\n                        binding.viewpager.setCurrentItem(binding.viewpager.getCurrentItem() + 1);\n                    }\n                    binding.skipBtn.setOnClickListener {\n                        binding.viewpager.setCurrentItem(binding.viewpager.getAdapter()!!.getCount());\n                    }\n                }\n\n                if (position == 1){\n                    onboardFirstPageBtnDesign()\n                    binding.contBtn.setOnClickListener {\n                        if (binding.viewpager.currentItem < binding.viewpager.adapter!!.count)\n                            binding.viewpager.setCurrentItem(binding.viewpager.currentItem + 1);\n                    }\n                    binding.skipBtn.setOnClickListener {\n                        binding.viewpager.setCurrentItem(binding.viewpager.adapter!!.count);\n                    }\n                }\n\n                if (position==2){\n                    onboardSecondPageBtnDesign()\n                    binding.skipBtn.setOnClickListener {\n                        getLocationPermission()\n                        if (permissionALlowed) {\n                            dashBoardNavigation.navigateToDashboard(navController = findNavController())\n                        }else{\n                            getLocationPermission()\n                        }\n                    }\n                }\n\n            }\n            override fun onPageSelected(position: Int) {\n               // TODO(\"Not yet implemented\")\n            }\n\n            override fun onPageScrollStateChanged(state: Int) {\n               // TODO(\"Not yet implemented\")\n            }\n\n        })\n    }\n\n    private fun getLocationPermission() {\n        Dexter.withContext(requireContext())\n            .withPermission(Manifest.permission.ACCESS_FINE_LOCATION)\n            .withListener(this@BoardingFragment)\n            .check()\n    }\n\n    private fun onboardSecondPageBtnDesign() {\n        binding.contBtn.visibility = View.GONE\n        binding.skipBtn.setBackgroundResource(R.drawable.onboard_button_round_corner)\n        binding.skipBtn.setText(\"Get Started\")\n        binding.skipBtn.setTextColor(Color.WHITE)\n    }\n\n    private fun onboardFirstPageBtnDesign() {\n        binding.contBtn.visibility = View.VISIBLE\n        binding.skipBtn.visibility = View.VISIBLE\n        binding.contBtn.setBackgroundResource(R.drawable.onboard_button_round_corner)\n        binding.contBtn.setText(\"Continue\")\n        binding.contBtn.setTextColor(Color.WHITE)\n        binding.skipBtn.setTextColor(resources.getColor(R.color.dark_orange))\n        binding.skipBtn.setText(\"Skip\")\n        binding.skipBtn.setBackgroundResource(R.drawable.onboard_transparent_btn_bg)\n    }\n\n\n    override fun onPermissionGranted(p0: PermissionGrantedResponse?) {\n        SharedPreference.init(requireContext().applicationContext)\n        SharedPreference.putBoolean(\"ALLOW\",false)\n        permissionALlowed = true\n\n    }\n\n    override fun onPermissionDenied(p0: PermissionDeniedResponse?) {\n        dashBoardNavigation.navigateToDashboard(navController = findNavController())\n        SharedPreference.putBoolean(\"ALLOW\",false)\n        permissionALlowed = false\n    }\n\n    override fun onPermissionRationaleShouldBeShown(p0: PermissionRequest?, p1: PermissionToken?) {\n       // TODO(\"Not yet implemented\")\n    }\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/features/onboarding/src/main/java/com/gear/weathery/onboarding/BoardingFragment.kt b/features/onboarding/src/main/java/com/gear/weathery/onboarding/BoardingFragment.kt
--- a/features/onboarding/src/main/java/com/gear/weathery/onboarding/BoardingFragment.kt	
+++ b/features/onboarding/src/main/java/com/gear/weathery/onboarding/BoardingFragment.kt	
@@ -3,9 +3,11 @@
 import android.Manifest
 import android.graphics.Color
 import android.os.Bundle
+import android.util.Log
 import android.view.LayoutInflater
 import android.view.View
 import android.view.ViewGroup
+import android.widget.Toast
 import androidx.fragment.app.Fragment
 import androidx.navigation.fragment.findNavController
 import androidx.viewpager.widget.ViewPager
@@ -27,7 +29,7 @@
     lateinit var pagerAdapter: ViewPagerAdapter
 
 
-    var permissionALlowed: Boolean = false
+    var permissionALlowed: Boolean? = null
 
 
 
@@ -44,7 +46,7 @@
 
     override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
         super.onViewCreated(view, savedInstanceState)
-
+        SharedPreference.init(requireContext().applicationContext)
         pagerAdapter = ViewPagerAdapter(requireContext())
         binding.viewpager.adapter = pagerAdapter
         binding.dotsIndicator.attachTo(binding.viewpager)
@@ -81,10 +83,17 @@
                     onboardSecondPageBtnDesign()
                     binding.skipBtn.setOnClickListener {
                         getLocationPermission()
-                        if (permissionALlowed) {
+                        if (permissionALlowed == true) {
+                            //go to dashboard
                             dashBoardNavigation.navigateToDashboard(navController = findNavController())
-                        }else{
+                        }
+                        else if (permissionALlowed == false){
                             getLocationPermission()
+                            SharedPreference.putBoolean("PERMISSION", permissionALlowed!!)
+
+                            //go to dashboard
+                            dashBoardNavigation.navigateToDashboard(navController = findNavController())
+
                         }
                     }
                 }
@@ -128,20 +137,21 @@
 
 
     override fun onPermissionGranted(p0: PermissionGrantedResponse?) {
-        SharedPreference.init(requireContext().applicationContext)
-        SharedPreference.putBoolean("ALLOW",false)
+       // SharedPreference.init(requireContext().applicationContext)
         permissionALlowed = true
-
+        SharedPreference.putBoolean("PERMISSION", permissionALlowed!!)
     }
 
     override fun onPermissionDenied(p0: PermissionDeniedResponse?) {
-        dashBoardNavigation.navigateToDashboard(navController = findNavController())
-        SharedPreference.putBoolean("ALLOW",false)
-        permissionALlowed = false
+//        dashBoardNavigation.navigateToDashboard(navController = findNavController())
+        permissionALlowed = true
+        SharedPreference.putBoolean("PERMISSION", false)
+       // SharedPreference.putBoolean("NOPERMISSION",true)
     }
 
     override fun onPermissionRationaleShouldBeShown(p0: PermissionRequest?, p1: PermissionToken?) {
-       // TODO("Not yet implemented")
+       // p1?.continuePermissionRequest()
+
     }
 
 }
\ No newline at end of file
Index: app/src/main/java/com/gear/weathery/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.gear.weathery\n\nimport android.content.Intent\nimport androidx.appcompat.app.AppCompatActivity\nimport android.os.Bundle\nimport androidx.navigation.NavController\nimport androidx.navigation.fragment.NavHostFragment\nimport androidx.navigation.fragment.findNavController\nimport androidx.navigation.ui.setupActionBarWithNavController\nimport com.gear.weathery.dashboard.R.id.dashBoardFragment\nimport com.gear.weathery.dashboard.R.id.dashboard_nav_graph\nimport com.gear.weathery.databinding.ActivityMainBinding\nimport dagger.hilt.android.AndroidEntryPoint\n\n\n@AndroidEntryPoint\nclass MainActivity : AppCompatActivity() {\n    private lateinit var binding: ActivityMainBinding\n    private lateinit var navController: NavController\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        binding = ActivityMainBinding.inflate(layoutInflater)\n        setContentView(binding.root)\n\n\n        val fragHost = supportFragmentManager.findFragmentById(R.id.fragHost) as NavHostFragment\n        navController = fragHost.findNavController()\n        var first  = intent.getBooleanExtra(\"FIRST\",true)\n\n        if(!first){\n\n            navController.navigate(dashboard_nav_graph)\n           // navController.clearBackStack(dashboard_nav_graph)\n        }\n\n    }\n    override fun onSupportNavigateUp(): Boolean {\n        return navController.navigateUp() || super.onSupportNavigateUp()\n    }\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/gear/weathery/MainActivity.kt b/app/src/main/java/com/gear/weathery/MainActivity.kt
--- a/app/src/main/java/com/gear/weathery/MainActivity.kt	
+++ b/app/src/main/java/com/gear/weathery/MainActivity.kt	
@@ -10,6 +10,7 @@
 import com.gear.weathery.dashboard.R.id.dashBoardFragment
 import com.gear.weathery.dashboard.R.id.dashboard_nav_graph
 import com.gear.weathery.databinding.ActivityMainBinding
+import com.gear.weathery.onboarding.SharedPreference
 import dagger.hilt.android.AndroidEntryPoint
 
 
@@ -26,14 +27,15 @@
 
         val fragHost = supportFragmentManager.findFragmentById(R.id.fragHost) as NavHostFragment
         navController = fragHost.findNavController()
-        var first  = intent.getBooleanExtra("FIRST",true)
+        var permissionAllowed  = intent.getBooleanExtra("FIRST",true)
+       // var permissionAllowed = SharedPreference.getBoolean("PERMISSION",false)
 
-        if(!first){
-
+        if(permissionAllowed){
             navController.navigate(dashboard_nav_graph)
            // navController.clearBackStack(dashboard_nav_graph)
         }
 
+
     }
     override fun onSupportNavigateUp(): Boolean {
         return navController.navigateUp() || super.onSupportNavigateUp()
